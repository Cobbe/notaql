// Generated from notaql\parser\antlr\NotaQL2.g4 by ANTLR 4.2.1
package notaql.parser.antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class NotaQL2Lexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, SL_COMMENT=8, 
		OPTWS=9, OPTNL=10, IN=11, OUT=12, ARROW=13, EQ=14, NEQ=15, LT=16, LTEQ=17, 
		GT=18, GTEQ=19, AND=20, OR=21, PLUS=22, MINUS=23, DIV=24, TRUE=25, FALSE=26, 
		Int=27, Float=28, String=29, AVG=30, COUNT=31, MAX=32, MIN=33, SUM=34, 
		IMPLODE=35, LIST=36, OBJECT=37, Name=38, OPEN=39, CLOSE=40, ARRAYOPEN=41, 
		ARRAYCLOSE=42, RESOLVE=43, PREDICATE=44, STAR=45, AT=46, DOT=47, COLON=48;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'IN-FILTER'", "'!'", "'IN-ENGINE:'", "'OUT-ENGINE:'", "';'", "'OUT-FILTER'", 
		"','", "SL_COMMENT", "OPTWS", "OPTNL", "'IN'", "'OUT'", "'<-'", "'='", 
		"'!='", "'<'", "'<='", "'>'", "'>='", "'&&'", "'||'", "'+'", "'-'", "'/'", 
		"'true'", "'false'", "Int", "Float", "String", "'AVG'", "'COUNT'", "'MAX'", 
		"'MIN'", "'SUM'", "'IMPLODE'", "'LIST'", "'OBJECT'", "Name", "'('", "')'", 
		"'['", "']'", "'$'", "'?'", "'*'", "'@'", "'.'", "':'"
	};
	public static final String[] ruleNames = {
		"T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "SL_COMMENT", 
		"OPTWS", "OPTNL", "IN", "OUT", "ARROW", "EQ", "NEQ", "LT", "LTEQ", "GT", 
		"GTEQ", "AND", "OR", "PLUS", "MINUS", "DIV", "TRUE", "FALSE", "Int", "Float", 
		"String", "AVG", "COUNT", "MAX", "MIN", "SUM", "IMPLODE", "LIST", "OBJECT", 
		"Name", "OPEN", "CLOSE", "ARRAYOPEN", "ARRAYCLOSE", "RESOLVE", "PREDICATE", 
		"STAR", "AT", "DOT", "COLON"
	};


	public NotaQL2Lexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "NotaQL2.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\62\u0137\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\3\2\3\2\3\2\3\2\3\2\3\2"+
		"\3\2\3\2\3\2\3\2\3\3\3\3\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3"+
		"\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\b\3\b\3\t\3\t\7\t\u0098\n\t\f\t\16\t\u009b"+
		"\13\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\13\5\13\u00a6\n\13\3\13\3\13\3"+
		"\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\17\3\17\3\20\3\20"+
		"\3\20\3\21\3\21\3\22\3\22\3\22\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\25"+
		"\3\26\3\26\3\26\3\27\3\27\3\30\3\30\3\31\3\31\3\32\3\32\3\32\3\32\3\32"+
		"\3\33\3\33\3\33\3\33\3\33\3\33\3\34\6\34\u00dd\n\34\r\34\16\34\u00de\3"+
		"\35\6\35\u00e2\n\35\r\35\16\35\u00e3\3\35\3\35\6\35\u00e8\n\35\r\35\16"+
		"\35\u00e9\3\36\3\36\7\36\u00ee\n\36\f\36\16\36\u00f1\13\36\3\36\3\36\3"+
		"\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3!\3!\3!\3!\3\"\3\"\3\"\3\"\3#\3"+
		"#\3#\3#\3$\3$\3$\3$\3$\3$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3&\3"+
		"\'\6\'\u0120\n\'\r\'\16\'\u0121\3(\3(\3)\3)\3*\3*\3+\3+\3,\3,\3-\3-\3"+
		".\3.\3/\3/\3\60\3\60\3\61\3\61\3\u0099\2\62\3\3\5\4\7\5\t\6\13\7\r\b\17"+
		"\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+"+
		"\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+"+
		"U,W-Y.[/]\60_\61a\62\3\2\6\4\2\13\13\"\"\3\2\62;\5\2\f\f\17\17))\6\2\62"+
		";C\\aac|\u013d\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3"+
		"\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2"+
		"\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3"+
		"\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2"+
		"\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\2"+
		"9\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3"+
		"\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2"+
		"\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2"+
		"_\3\2\2\2\2a\3\2\2\2\3c\3\2\2\2\5m\3\2\2\2\7o\3\2\2\2\tz\3\2\2\2\13\u0086"+
		"\3\2\2\2\r\u0088\3\2\2\2\17\u0093\3\2\2\2\21\u0095\3\2\2\2\23\u00a0\3"+
		"\2\2\2\25\u00a5\3\2\2\2\27\u00ab\3\2\2\2\31\u00ae\3\2\2\2\33\u00b2\3\2"+
		"\2\2\35\u00b5\3\2\2\2\37\u00b7\3\2\2\2!\u00ba\3\2\2\2#\u00bc\3\2\2\2%"+
		"\u00bf\3\2\2\2\'\u00c1\3\2\2\2)\u00c4\3\2\2\2+\u00c7\3\2\2\2-\u00ca\3"+
		"\2\2\2/\u00cc\3\2\2\2\61\u00ce\3\2\2\2\63\u00d0\3\2\2\2\65\u00d5\3\2\2"+
		"\2\67\u00dc\3\2\2\29\u00e1\3\2\2\2;\u00eb\3\2\2\2=\u00f4\3\2\2\2?\u00f8"+
		"\3\2\2\2A\u00fe\3\2\2\2C\u0102\3\2\2\2E\u0106\3\2\2\2G\u010a\3\2\2\2I"+
		"\u0112\3\2\2\2K\u0117\3\2\2\2M\u011f\3\2\2\2O\u0123\3\2\2\2Q\u0125\3\2"+
		"\2\2S\u0127\3\2\2\2U\u0129\3\2\2\2W\u012b\3\2\2\2Y\u012d\3\2\2\2[\u012f"+
		"\3\2\2\2]\u0131\3\2\2\2_\u0133\3\2\2\2a\u0135\3\2\2\2cd\7K\2\2de\7P\2"+
		"\2ef\7/\2\2fg\7H\2\2gh\7K\2\2hi\7N\2\2ij\7V\2\2jk\7G\2\2kl\7T\2\2l\4\3"+
		"\2\2\2mn\7#\2\2n\6\3\2\2\2op\7K\2\2pq\7P\2\2qr\7/\2\2rs\7G\2\2st\7P\2"+
		"\2tu\7I\2\2uv\7K\2\2vw\7P\2\2wx\7G\2\2xy\7<\2\2y\b\3\2\2\2z{\7Q\2\2{|"+
		"\7W\2\2|}\7V\2\2}~\7/\2\2~\177\7G\2\2\177\u0080\7P\2\2\u0080\u0081\7I"+
		"\2\2\u0081\u0082\7K\2\2\u0082\u0083\7P\2\2\u0083\u0084\7G\2\2\u0084\u0085"+
		"\7<\2\2\u0085\n\3\2\2\2\u0086\u0087\7=\2\2\u0087\f\3\2\2\2\u0088\u0089"+
		"\7Q\2\2\u0089\u008a\7W\2\2\u008a\u008b\7V\2\2\u008b\u008c\7/\2\2\u008c"+
		"\u008d\7H\2\2\u008d\u008e\7K\2\2\u008e\u008f\7N\2\2\u008f\u0090\7V\2\2"+
		"\u0090\u0091\7G\2\2\u0091\u0092\7T\2\2\u0092\16\3\2\2\2\u0093\u0094\7"+
		".\2\2\u0094\20\3\2\2\2\u0095\u0099\7%\2\2\u0096\u0098\13\2\2\2\u0097\u0096"+
		"\3\2\2\2\u0098\u009b\3\2\2\2\u0099\u009a\3\2\2\2\u0099\u0097\3\2\2\2\u009a"+
		"\u009c\3\2\2\2\u009b\u0099\3\2\2\2\u009c\u009d\7\f\2\2\u009d\u009e\3\2"+
		"\2\2\u009e\u009f\b\t\2\2\u009f\22\3\2\2\2\u00a0\u00a1\t\2\2\2\u00a1\u00a2"+
		"\3\2\2\2\u00a2\u00a3\b\n\2\2\u00a3\24\3\2\2\2\u00a4\u00a6\7\17\2\2\u00a5"+
		"\u00a4\3\2\2\2\u00a5\u00a6\3\2\2\2\u00a6\u00a7\3\2\2\2\u00a7\u00a8\7\f"+
		"\2\2\u00a8\u00a9\3\2\2\2\u00a9\u00aa\b\13\2\2\u00aa\26\3\2\2\2\u00ab\u00ac"+
		"\7K\2\2\u00ac\u00ad\7P\2\2\u00ad\30\3\2\2\2\u00ae\u00af\7Q\2\2\u00af\u00b0"+
		"\7W\2\2\u00b0\u00b1\7V\2\2\u00b1\32\3\2\2\2\u00b2\u00b3\7>\2\2\u00b3\u00b4"+
		"\7/\2\2\u00b4\34\3\2\2\2\u00b5\u00b6\7?\2\2\u00b6\36\3\2\2\2\u00b7\u00b8"+
		"\7#\2\2\u00b8\u00b9\7?\2\2\u00b9 \3\2\2\2\u00ba\u00bb\7>\2\2\u00bb\"\3"+
		"\2\2\2\u00bc\u00bd\7>\2\2\u00bd\u00be\7?\2\2\u00be$\3\2\2\2\u00bf\u00c0"+
		"\7@\2\2\u00c0&\3\2\2\2\u00c1\u00c2\7@\2\2\u00c2\u00c3\7?\2\2\u00c3(\3"+
		"\2\2\2\u00c4\u00c5\7(\2\2\u00c5\u00c6\7(\2\2\u00c6*\3\2\2\2\u00c7\u00c8"+
		"\7~\2\2\u00c8\u00c9\7~\2\2\u00c9,\3\2\2\2\u00ca\u00cb\7-\2\2\u00cb.\3"+
		"\2\2\2\u00cc\u00cd\7/\2\2\u00cd\60\3\2\2\2\u00ce\u00cf\7\61\2\2\u00cf"+
		"\62\3\2\2\2\u00d0\u00d1\7v\2\2\u00d1\u00d2\7t\2\2\u00d2\u00d3\7w\2\2\u00d3"+
		"\u00d4\7g\2\2\u00d4\64\3\2\2\2\u00d5\u00d6\7h\2\2\u00d6\u00d7\7c\2\2\u00d7"+
		"\u00d8\7n\2\2\u00d8\u00d9\7u\2\2\u00d9\u00da\7g\2\2\u00da\66\3\2\2\2\u00db"+
		"\u00dd\t\3\2\2\u00dc\u00db\3\2\2\2\u00dd\u00de\3\2\2\2\u00de\u00dc\3\2"+
		"\2\2\u00de\u00df\3\2\2\2\u00df8\3\2\2\2\u00e0\u00e2\t\3\2\2\u00e1\u00e0"+
		"\3\2\2\2\u00e2\u00e3\3\2\2\2\u00e3\u00e1\3\2\2\2\u00e3\u00e4\3\2\2\2\u00e4"+
		"\u00e5\3\2\2\2\u00e5\u00e7\7\60\2\2\u00e6\u00e8\t\3\2\2\u00e7\u00e6\3"+
		"\2\2\2\u00e8\u00e9\3\2\2\2\u00e9\u00e7\3\2\2\2\u00e9\u00ea\3\2\2\2\u00ea"+
		":\3\2\2\2\u00eb\u00ef\7)\2\2\u00ec\u00ee\n\4\2\2\u00ed\u00ec\3\2\2\2\u00ee"+
		"\u00f1\3\2\2\2\u00ef\u00ed\3\2\2\2\u00ef\u00f0\3\2\2\2\u00f0\u00f2\3\2"+
		"\2\2\u00f1\u00ef\3\2\2\2\u00f2\u00f3\7)\2\2\u00f3<\3\2\2\2\u00f4\u00f5"+
		"\7C\2\2\u00f5\u00f6\7X\2\2\u00f6\u00f7\7I\2\2\u00f7>\3\2\2\2\u00f8\u00f9"+
		"\7E\2\2\u00f9\u00fa\7Q\2\2\u00fa\u00fb\7W\2\2\u00fb\u00fc\7P\2\2\u00fc"+
		"\u00fd\7V\2\2\u00fd@\3\2\2\2\u00fe\u00ff\7O\2\2\u00ff\u0100\7C\2\2\u0100"+
		"\u0101\7Z\2\2\u0101B\3\2\2\2\u0102\u0103\7O\2\2\u0103\u0104\7K\2\2\u0104"+
		"\u0105\7P\2\2\u0105D\3\2\2\2\u0106\u0107\7U\2\2\u0107\u0108\7W\2\2\u0108"+
		"\u0109\7O\2\2\u0109F\3\2\2\2\u010a\u010b\7K\2\2\u010b\u010c\7O\2\2\u010c"+
		"\u010d\7R\2\2\u010d\u010e\7N\2\2\u010e\u010f\7Q\2\2\u010f\u0110\7F\2\2"+
		"\u0110\u0111\7G\2\2\u0111H\3\2\2\2\u0112\u0113\7N\2\2\u0113\u0114\7K\2"+
		"\2\u0114\u0115\7U\2\2\u0115\u0116\7V\2\2\u0116J\3\2\2\2\u0117\u0118\7"+
		"Q\2\2\u0118\u0119\7D\2\2\u0119\u011a\7L\2\2\u011a\u011b\7G\2\2\u011b\u011c"+
		"\7E\2\2\u011c\u011d\7V\2\2\u011dL\3\2\2\2\u011e\u0120\t\5\2\2\u011f\u011e"+
		"\3\2\2\2\u0120\u0121\3\2\2\2\u0121\u011f\3\2\2\2\u0121\u0122\3\2\2\2\u0122"+
		"N\3\2\2\2\u0123\u0124\7*\2\2\u0124P\3\2\2\2\u0125\u0126\7+\2\2\u0126R"+
		"\3\2\2\2\u0127\u0128\7]\2\2\u0128T\3\2\2\2\u0129\u012a\7_\2\2\u012aV\3"+
		"\2\2\2\u012b\u012c\7&\2\2\u012cX\3\2\2\2\u012d\u012e\7A\2\2\u012eZ\3\2"+
		"\2\2\u012f\u0130\7,\2\2\u0130\\\3\2\2\2\u0131\u0132\7B\2\2\u0132^\3\2"+
		"\2\2\u0133\u0134\7\60\2\2\u0134`\3\2\2\2\u0135\u0136\7<\2\2\u0136b\3\2"+
		"\2\2\n\2\u0099\u00a5\u00de\u00e3\u00e9\u00ef\u0121\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}