// Generated from notaql\parser\antlr\NotaQL2KeyValueIn.g4 by ANTLR 4.2.1
package notaql.parser.antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class NotaQL2KeyValueInLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, NameToken=8, IndexToken=9, 
		Key=10, Val=11, Split=12, SL_COMMENT=13, OPTWS=14, OPTNL=15, IN=16, OUT=17, 
		ARROW=18, EQ=19, NEQ=20, LT=21, LTEQ=22, GT=23, GTEQ=24, AND=25, OR=26, 
		PLUS=27, MINUS=28, DIV=29, TRUE=30, FALSE=31, Int=32, Float=33, String=34, 
		AVG=35, COUNT=36, MAX=37, MIN=38, SUM=39, IMPLODE=40, LIST=41, OBJECT=42, 
		Name=43, OPEN=44, CLOSE=45, ARRAYOPEN=46, ARRAYCLOSE=47, RESOLVE=48, PREDICATE=49, 
		STAR=50, AT=51, DOT=52, COLON=53;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'IN-FILTER'", "'OUT-ENGINE:'", "';'", "'!'", "'IN-ENGINE:'", "'OUT-FILTER'", 
		"','", "'name()'", "'index()'", "'_k'", "'_v'", "'split'", "SL_COMMENT", 
		"OPTWS", "OPTNL", "'IN'", "'OUT'", "'<-'", "'='", "'!='", "'<'", "'<='", 
		"'>'", "'>='", "'&&'", "'||'", "'+'", "'-'", "'/'", "'true'", "'false'", 
		"Int", "Float", "String", "'AVG'", "'COUNT'", "'MAX'", "'MIN'", "'SUM'", 
		"'IMPLODE'", "'LIST'", "'OBJECT'", "Name", "'('", "')'", "'['", "']'", 
		"'$'", "'?'", "'*'", "'@'", "'.'", "':'"
	};
	public static final String[] ruleNames = {
		"T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "NameToken", "IndexToken", 
		"Key", "Val", "Split", "SL_COMMENT", "OPTWS", "OPTNL", "IN", "OUT", "ARROW", 
		"EQ", "NEQ", "LT", "LTEQ", "GT", "GTEQ", "AND", "OR", "PLUS", "MINUS", 
		"DIV", "TRUE", "FALSE", "Int", "Float", "String", "AVG", "COUNT", "MAX", 
		"MIN", "SUM", "IMPLODE", "LIST", "OBJECT", "Name", "OPEN", "CLOSE", "ARRAYOPEN", 
		"ARRAYCLOSE", "RESOLVE", "PREDICATE", "STAR", "AT", "DOT", "COLON"
	};


	public NotaQL2KeyValueInLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "NotaQL2KeyValueIn.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\67\u015c\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\4\66\t\66\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3"+
		"\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7"+
		"\3\7\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3"+
		"\n\3\n\3\13\3\13\3\13\3\f\3\f\3\f\3\r\3\r\3\r\3\r\3\r\3\r\3\16\3\16\7"+
		"\16\u00bd\n\16\f\16\16\16\u00c0\13\16\3\16\3\16\3\16\3\16\3\17\3\17\3"+
		"\17\3\17\3\20\5\20\u00cb\n\20\3\20\3\20\3\20\3\20\3\21\3\21\3\21\3\22"+
		"\3\22\3\22\3\22\3\23\3\23\3\23\3\24\3\24\3\25\3\25\3\25\3\26\3\26\3\27"+
		"\3\27\3\27\3\30\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\33\3\34"+
		"\3\34\3\35\3\35\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3"+
		"!\6!\u0102\n!\r!\16!\u0103\3\"\6\"\u0107\n\"\r\"\16\"\u0108\3\"\3\"\6"+
		"\"\u010d\n\"\r\"\16\"\u010e\3#\3#\7#\u0113\n#\f#\16#\u0116\13#\3#\3#\3"+
		"$\3$\3$\3$\3%\3%\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3"+
		")\3)\3)\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3+\3+\3+\3+\3+\3+\3+\3,\6,\u0145"+
		"\n,\r,\16,\u0146\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63"+
		"\3\63\3\64\3\64\3\65\3\65\3\66\3\66\3\u00be\2\67\3\3\5\4\7\5\t\6\13\7"+
		"\r\b\17\t\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25"+
		")\26+\27-\30/\31\61\32\63\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O"+
		")Q*S+U,W-Y.[/]\60_\61a\62c\63e\64g\65i\66k\67\3\2\6\4\2\13\13\"\"\3\2"+
		"\62;\5\2\f\f\17\17))\6\2\62;C\\aac|\u0162\2\3\3\2\2\2\2\5\3\2\2\2\2\7"+
		"\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2"+
		"\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2"+
		"\35\3\2\2\2\2\37\3\2\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2"+
		"\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2"+
		"\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2"+
		"\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M"+
		"\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2"+
		"\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2"+
		"\2g\3\2\2\2\2i\3\2\2\2\2k\3\2\2\2\3m\3\2\2\2\5w\3\2\2\2\7\u0083\3\2\2"+
		"\2\t\u0085\3\2\2\2\13\u0087\3\2\2\2\r\u0092\3\2\2\2\17\u009d\3\2\2\2\21"+
		"\u009f\3\2\2\2\23\u00a6\3\2\2\2\25\u00ae\3\2\2\2\27\u00b1\3\2\2\2\31\u00b4"+
		"\3\2\2\2\33\u00ba\3\2\2\2\35\u00c5\3\2\2\2\37\u00ca\3\2\2\2!\u00d0\3\2"+
		"\2\2#\u00d3\3\2\2\2%\u00d7\3\2\2\2\'\u00da\3\2\2\2)\u00dc\3\2\2\2+\u00df"+
		"\3\2\2\2-\u00e1\3\2\2\2/\u00e4\3\2\2\2\61\u00e6\3\2\2\2\63\u00e9\3\2\2"+
		"\2\65\u00ec\3\2\2\2\67\u00ef\3\2\2\29\u00f1\3\2\2\2;\u00f3\3\2\2\2=\u00f5"+
		"\3\2\2\2?\u00fa\3\2\2\2A\u0101\3\2\2\2C\u0106\3\2\2\2E\u0110\3\2\2\2G"+
		"\u0119\3\2\2\2I\u011d\3\2\2\2K\u0123\3\2\2\2M\u0127\3\2\2\2O\u012b\3\2"+
		"\2\2Q\u012f\3\2\2\2S\u0137\3\2\2\2U\u013c\3\2\2\2W\u0144\3\2\2\2Y\u0148"+
		"\3\2\2\2[\u014a\3\2\2\2]\u014c\3\2\2\2_\u014e\3\2\2\2a\u0150\3\2\2\2c"+
		"\u0152\3\2\2\2e\u0154\3\2\2\2g\u0156\3\2\2\2i\u0158\3\2\2\2k\u015a\3\2"+
		"\2\2mn\7K\2\2no\7P\2\2op\7/\2\2pq\7H\2\2qr\7K\2\2rs\7N\2\2st\7V\2\2tu"+
		"\7G\2\2uv\7T\2\2v\4\3\2\2\2wx\7Q\2\2xy\7W\2\2yz\7V\2\2z{\7/\2\2{|\7G\2"+
		"\2|}\7P\2\2}~\7I\2\2~\177\7K\2\2\177\u0080\7P\2\2\u0080\u0081\7G\2\2\u0081"+
		"\u0082\7<\2\2\u0082\6\3\2\2\2\u0083\u0084\7=\2\2\u0084\b\3\2\2\2\u0085"+
		"\u0086\7#\2\2\u0086\n\3\2\2\2\u0087\u0088\7K\2\2\u0088\u0089\7P\2\2\u0089"+
		"\u008a\7/\2\2\u008a\u008b\7G\2\2\u008b\u008c\7P\2\2\u008c\u008d\7I\2\2"+
		"\u008d\u008e\7K\2\2\u008e\u008f\7P\2\2\u008f\u0090\7G\2\2\u0090\u0091"+
		"\7<\2\2\u0091\f\3\2\2\2\u0092\u0093\7Q\2\2\u0093\u0094\7W\2\2\u0094\u0095"+
		"\7V\2\2\u0095\u0096\7/\2\2\u0096\u0097\7H\2\2\u0097\u0098\7K\2\2\u0098"+
		"\u0099\7N\2\2\u0099\u009a\7V\2\2\u009a\u009b\7G\2\2\u009b\u009c\7T\2\2"+
		"\u009c\16\3\2\2\2\u009d\u009e\7.\2\2\u009e\20\3\2\2\2\u009f\u00a0\7p\2"+
		"\2\u00a0\u00a1\7c\2\2\u00a1\u00a2\7o\2\2\u00a2\u00a3\7g\2\2\u00a3\u00a4"+
		"\7*\2\2\u00a4\u00a5\7+\2\2\u00a5\22\3\2\2\2\u00a6\u00a7\7k\2\2\u00a7\u00a8"+
		"\7p\2\2\u00a8\u00a9\7f\2\2\u00a9\u00aa\7g\2\2\u00aa\u00ab\7z\2\2\u00ab"+
		"\u00ac\7*\2\2\u00ac\u00ad\7+\2\2\u00ad\24\3\2\2\2\u00ae\u00af\7a\2\2\u00af"+
		"\u00b0\7m\2\2\u00b0\26\3\2\2\2\u00b1\u00b2\7a\2\2\u00b2\u00b3\7x\2\2\u00b3"+
		"\30\3\2\2\2\u00b4\u00b5\7u\2\2\u00b5\u00b6\7r\2\2\u00b6\u00b7\7n\2\2\u00b7"+
		"\u00b8\7k\2\2\u00b8\u00b9\7v\2\2\u00b9\32\3\2\2\2\u00ba\u00be\7%\2\2\u00bb"+
		"\u00bd\13\2\2\2\u00bc\u00bb\3\2\2\2\u00bd\u00c0\3\2\2\2\u00be\u00bf\3"+
		"\2\2\2\u00be\u00bc\3\2\2\2\u00bf\u00c1\3\2\2\2\u00c0\u00be\3\2\2\2\u00c1"+
		"\u00c2\7\f\2\2\u00c2\u00c3\3\2\2\2\u00c3\u00c4\b\16\2\2\u00c4\34\3\2\2"+
		"\2\u00c5\u00c6\t\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c8\b\17\2\2\u00c8"+
		"\36\3\2\2\2\u00c9\u00cb\7\17\2\2\u00ca\u00c9\3\2\2\2\u00ca\u00cb\3\2\2"+
		"\2\u00cb\u00cc\3\2\2\2\u00cc\u00cd\7\f\2\2\u00cd\u00ce\3\2\2\2\u00ce\u00cf"+
		"\b\20\2\2\u00cf \3\2\2\2\u00d0\u00d1\7K\2\2\u00d1\u00d2\7P\2\2\u00d2\""+
		"\3\2\2\2\u00d3\u00d4\7Q\2\2\u00d4\u00d5\7W\2\2\u00d5\u00d6\7V\2\2\u00d6"+
		"$\3\2\2\2\u00d7\u00d8\7>\2\2\u00d8\u00d9\7/\2\2\u00d9&\3\2\2\2\u00da\u00db"+
		"\7?\2\2\u00db(\3\2\2\2\u00dc\u00dd\7#\2\2\u00dd\u00de\7?\2\2\u00de*\3"+
		"\2\2\2\u00df\u00e0\7>\2\2\u00e0,\3\2\2\2\u00e1\u00e2\7>\2\2\u00e2\u00e3"+
		"\7?\2\2\u00e3.\3\2\2\2\u00e4\u00e5\7@\2\2\u00e5\60\3\2\2\2\u00e6\u00e7"+
		"\7@\2\2\u00e7\u00e8\7?\2\2\u00e8\62\3\2\2\2\u00e9\u00ea\7(\2\2\u00ea\u00eb"+
		"\7(\2\2\u00eb\64\3\2\2\2\u00ec\u00ed\7~\2\2\u00ed\u00ee\7~\2\2\u00ee\66"+
		"\3\2\2\2\u00ef\u00f0\7-\2\2\u00f08\3\2\2\2\u00f1\u00f2\7/\2\2\u00f2:\3"+
		"\2\2\2\u00f3\u00f4\7\61\2\2\u00f4<\3\2\2\2\u00f5\u00f6\7v\2\2\u00f6\u00f7"+
		"\7t\2\2\u00f7\u00f8\7w\2\2\u00f8\u00f9\7g\2\2\u00f9>\3\2\2\2\u00fa\u00fb"+
		"\7h\2\2\u00fb\u00fc\7c\2\2\u00fc\u00fd\7n\2\2\u00fd\u00fe\7u\2\2\u00fe"+
		"\u00ff\7g\2\2\u00ff@\3\2\2\2\u0100\u0102\t\3\2\2\u0101\u0100\3\2\2\2\u0102"+
		"\u0103\3\2\2\2\u0103\u0101\3\2\2\2\u0103\u0104\3\2\2\2\u0104B\3\2\2\2"+
		"\u0105\u0107\t\3\2\2\u0106\u0105\3\2\2\2\u0107\u0108\3\2\2\2\u0108\u0106"+
		"\3\2\2\2\u0108\u0109\3\2\2\2\u0109\u010a\3\2\2\2\u010a\u010c\7\60\2\2"+
		"\u010b\u010d\t\3\2\2\u010c\u010b\3\2\2\2\u010d\u010e\3\2\2\2\u010e\u010c"+
		"\3\2\2\2\u010e\u010f\3\2\2\2\u010fD\3\2\2\2\u0110\u0114\7)\2\2\u0111\u0113"+
		"\n\4\2\2\u0112\u0111\3\2\2\2\u0113\u0116\3\2\2\2\u0114\u0112\3\2\2\2\u0114"+
		"\u0115\3\2\2\2\u0115\u0117\3\2\2\2\u0116\u0114\3\2\2\2\u0117\u0118\7)"+
		"\2\2\u0118F\3\2\2\2\u0119\u011a\7C\2\2\u011a\u011b\7X\2\2\u011b\u011c"+
		"\7I\2\2\u011cH\3\2\2\2\u011d\u011e\7E\2\2\u011e\u011f\7Q\2\2\u011f\u0120"+
		"\7W\2\2\u0120\u0121\7P\2\2\u0121\u0122\7V\2\2\u0122J\3\2\2\2\u0123\u0124"+
		"\7O\2\2\u0124\u0125\7C\2\2\u0125\u0126\7Z\2\2\u0126L\3\2\2\2\u0127\u0128"+
		"\7O\2\2\u0128\u0129\7K\2\2\u0129\u012a\7P\2\2\u012aN\3\2\2\2\u012b\u012c"+
		"\7U\2\2\u012c\u012d\7W\2\2\u012d\u012e\7O\2\2\u012eP\3\2\2\2\u012f\u0130"+
		"\7K\2\2\u0130\u0131\7O\2\2\u0131\u0132\7R\2\2\u0132\u0133\7N\2\2\u0133"+
		"\u0134\7Q\2\2\u0134\u0135\7F\2\2\u0135\u0136\7G\2\2\u0136R\3\2\2\2\u0137"+
		"\u0138\7N\2\2\u0138\u0139\7K\2\2\u0139\u013a\7U\2\2\u013a\u013b\7V\2\2"+
		"\u013bT\3\2\2\2\u013c\u013d\7Q\2\2\u013d\u013e\7D\2\2\u013e\u013f\7L\2"+
		"\2\u013f\u0140\7G\2\2\u0140\u0141\7E\2\2\u0141\u0142\7V\2\2\u0142V\3\2"+
		"\2\2\u0143\u0145\t\5\2\2\u0144\u0143\3\2\2\2\u0145\u0146\3\2\2\2\u0146"+
		"\u0144\3\2\2\2\u0146\u0147\3\2\2\2\u0147X\3\2\2\2\u0148\u0149\7*\2\2\u0149"+
		"Z\3\2\2\2\u014a\u014b\7+\2\2\u014b\\\3\2\2\2\u014c\u014d\7]\2\2\u014d"+
		"^\3\2\2\2\u014e\u014f\7_\2\2\u014f`\3\2\2\2\u0150\u0151\7&\2\2\u0151b"+
		"\3\2\2\2\u0152\u0153\7A\2\2\u0153d\3\2\2\2\u0154\u0155\7,\2\2\u0155f\3"+
		"\2\2\2\u0156\u0157\7B\2\2\u0157h\3\2\2\2\u0158\u0159\7\60\2\2\u0159j\3"+
		"\2\2\2\u015a\u015b\7<\2\2\u015bl\3\2\2\2\n\2\u00be\u00ca\u0103\u0108\u010e"+
		"\u0114\u0146\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}