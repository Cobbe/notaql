// Generated from notaql\parser\antlr\NotaQL2DocumentIn.g4 by ANTLR 4.2.1
package notaql.parser.antlr;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Token;
import org.antlr.v4.runtime.TokenStream;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.atn.*;
import org.antlr.v4.runtime.dfa.DFA;
import org.antlr.v4.runtime.misc.*;

@SuppressWarnings({"all", "warnings", "unchecked", "unused", "cast"})
public class NotaQL2DocumentInLexer extends Lexer {
	protected static final DFA[] _decisionToDFA;
	protected static final PredictionContextCache _sharedContextCache =
		new PredictionContextCache();
	public static final int
		T__6=1, T__5=2, T__4=3, T__3=4, T__2=5, T__1=6, T__0=7, NameToken=8, IndexToken=9, 
		SplitToken=10, IdToken=11, SL_COMMENT=12, OPTWS=13, OPTNL=14, IN=15, OUT=16, 
		ARROW=17, EQ=18, NEQ=19, LT=20, LTEQ=21, GT=22, GTEQ=23, AND=24, OR=25, 
		PLUS=26, MINUS=27, DIV=28, TRUE=29, FALSE=30, Int=31, Float=32, String=33, 
		AVG=34, COUNT=35, MAX=36, MIN=37, SUM=38, IMPLODE=39, LIST=40, OBJECT=41, 
		Name=42, OPEN=43, CLOSE=44, ARRAYOPEN=45, ARRAYCLOSE=46, RESOLVE=47, PREDICATE=48, 
		STAR=49, AT=50, DOT=51, COLON=52;
	public static String[] modeNames = {
		"DEFAULT_MODE"
	};

	public static final String[] tokenNames = {
		"<INVALID>",
		"'IN-FILTER'", "'OUT-ENGINE:'", "';'", "'!'", "'IN-ENGINE:'", "'OUT-FILTER'", 
		"','", "'name()'", "'index()'", "'split'", "'_id'", "SL_COMMENT", "OPTWS", 
		"OPTNL", "'IN'", "'OUT'", "'<-'", "'='", "'!='", "'<'", "'<='", "'>'", 
		"'>='", "'&&'", "'||'", "'+'", "'-'", "'/'", "'true'", "'false'", "Int", 
		"Float", "String", "'AVG'", "'COUNT'", "'MAX'", "'MIN'", "'SUM'", "'IMPLODE'", 
		"'LIST'", "'OBJECT'", "Name", "'('", "')'", "'['", "']'", "'$'", "'?'", 
		"'*'", "'@'", "'.'", "':'"
	};
	public static final String[] ruleNames = {
		"T__6", "T__5", "T__4", "T__3", "T__2", "T__1", "T__0", "NameToken", "IndexToken", 
		"SplitToken", "IdToken", "SL_COMMENT", "OPTWS", "OPTNL", "IN", "OUT", 
		"ARROW", "EQ", "NEQ", "LT", "LTEQ", "GT", "GTEQ", "AND", "OR", "PLUS", 
		"MINUS", "DIV", "TRUE", "FALSE", "Int", "Float", "String", "AVG", "COUNT", 
		"MAX", "MIN", "SUM", "IMPLODE", "LIST", "OBJECT", "Name", "OPEN", "CLOSE", 
		"ARRAYOPEN", "ARRAYCLOSE", "RESOLVE", "PREDICATE", "STAR", "AT", "DOT", 
		"COLON"
	};


	public NotaQL2DocumentInLexer(CharStream input) {
		super(input);
		_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);
	}

	@Override
	public String getGrammarFileName() { return "NotaQL2DocumentIn.g4"; }

	@Override
	public String[] getTokenNames() { return tokenNames; }

	@Override
	public String[] getRuleNames() { return ruleNames; }

	@Override
	public String getSerializedATN() { return _serializedATN; }

	@Override
	public String[] getModeNames() { return modeNames; }

	@Override
	public ATN getATN() { return _ATN; }

	public static final String _serializedATN =
		"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\2\66\u0158\b\1\4\2"+
		"\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4"+
		"\13\t\13\4\f\t\f\4\r\t\r\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22"+
		"\t\22\4\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30\4\31"+
		"\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36\t\36\4\37\t\37\4 \t"+
		" \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t"+
		"+\4,\t,\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64"+
		"\t\64\4\65\t\65\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3\3\3"+
		"\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\3\4\3\4\3\5\3\5\3\6\3\6\3\6\3\6\3\6"+
		"\3\6\3\6\3\6\3\6\3\6\3\6\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3\7\3"+
		"\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\n\3\13"+
		"\3\13\3\13\3\13\3\13\3\13\3\f\3\f\3\f\3\f\3\r\3\r\7\r\u00b9\n\r\f\r\16"+
		"\r\u00bc\13\r\3\r\3\r\3\r\3\r\3\16\3\16\3\16\3\16\3\17\5\17\u00c7\n\17"+
		"\3\17\3\17\3\17\3\17\3\20\3\20\3\20\3\21\3\21\3\21\3\21\3\22\3\22\3\22"+
		"\3\23\3\23\3\24\3\24\3\24\3\25\3\25\3\26\3\26\3\26\3\27\3\27\3\30\3\30"+
		"\3\30\3\31\3\31\3\31\3\32\3\32\3\32\3\33\3\33\3\34\3\34\3\35\3\35\3\36"+
		"\3\36\3\36\3\36\3\36\3\37\3\37\3\37\3\37\3\37\3\37\3 \6 \u00fe\n \r \16"+
		" \u00ff\3!\6!\u0103\n!\r!\16!\u0104\3!\3!\6!\u0109\n!\r!\16!\u010a\3\""+
		"\3\"\7\"\u010f\n\"\f\"\16\"\u0112\13\"\3\"\3\"\3#\3#\3#\3#\3$\3$\3$\3"+
		"$\3$\3$\3%\3%\3%\3%\3&\3&\3&\3&\3\'\3\'\3\'\3\'\3(\3(\3(\3(\3(\3(\3(\3"+
		"(\3)\3)\3)\3)\3)\3*\3*\3*\3*\3*\3*\3*\3+\6+\u0141\n+\r+\16+\u0142\3,\3"+
		",\3-\3-\3.\3.\3/\3/\3\60\3\60\3\61\3\61\3\62\3\62\3\63\3\63\3\64\3\64"+
		"\3\65\3\65\3\u00ba\2\66\3\3\5\4\7\5\t\6\13\7\r\b\17\t\21\n\23\13\25\f"+
		"\27\r\31\16\33\17\35\20\37\21!\22#\23%\24\'\25)\26+\27-\30/\31\61\32\63"+
		"\33\65\34\67\359\36;\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62"+
		"c\63e\64g\65i\66\3\2\6\4\2\13\13\"\"\3\2\62;\5\2\f\f\17\17))\6\2\62;C"+
		"\\aac|\u015e\2\3\3\2\2\2\2\5\3\2\2\2\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2"+
		"\2\2\2\r\3\2\2\2\2\17\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2"+
		"\27\3\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2\2\2\2!\3\2"+
		"\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3\2\2\2\2+\3\2\2\2\2-\3\2\2"+
		"\2\2/\3\2\2\2\2\61\3\2\2\2\2\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3"+
		"\2\2\2\2;\3\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E\3\2\2"+
		"\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2O\3\2\2\2\2Q\3\2\2\2\2"+
		"S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3"+
		"\2\2\2\2a\3\2\2\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\3k\3\2\2"+
		"\2\5u\3\2\2\2\7\u0081\3\2\2\2\t\u0083\3\2\2\2\13\u0085\3\2\2\2\r\u0090"+
		"\3\2\2\2\17\u009b\3\2\2\2\21\u009d\3\2\2\2\23\u00a4\3\2\2\2\25\u00ac\3"+
		"\2\2\2\27\u00b2\3\2\2\2\31\u00b6\3\2\2\2\33\u00c1\3\2\2\2\35\u00c6\3\2"+
		"\2\2\37\u00cc\3\2\2\2!\u00cf\3\2\2\2#\u00d3\3\2\2\2%\u00d6\3\2\2\2\'\u00d8"+
		"\3\2\2\2)\u00db\3\2\2\2+\u00dd\3\2\2\2-\u00e0\3\2\2\2/\u00e2\3\2\2\2\61"+
		"\u00e5\3\2\2\2\63\u00e8\3\2\2\2\65\u00eb\3\2\2\2\67\u00ed\3\2\2\29\u00ef"+
		"\3\2\2\2;\u00f1\3\2\2\2=\u00f6\3\2\2\2?\u00fd\3\2\2\2A\u0102\3\2\2\2C"+
		"\u010c\3\2\2\2E\u0115\3\2\2\2G\u0119\3\2\2\2I\u011f\3\2\2\2K\u0123\3\2"+
		"\2\2M\u0127\3\2\2\2O\u012b\3\2\2\2Q\u0133\3\2\2\2S\u0138\3\2\2\2U\u0140"+
		"\3\2\2\2W\u0144\3\2\2\2Y\u0146\3\2\2\2[\u0148\3\2\2\2]\u014a\3\2\2\2_"+
		"\u014c\3\2\2\2a\u014e\3\2\2\2c\u0150\3\2\2\2e\u0152\3\2\2\2g\u0154\3\2"+
		"\2\2i\u0156\3\2\2\2kl\7K\2\2lm\7P\2\2mn\7/\2\2no\7H\2\2op\7K\2\2pq\7N"+
		"\2\2qr\7V\2\2rs\7G\2\2st\7T\2\2t\4\3\2\2\2uv\7Q\2\2vw\7W\2\2wx\7V\2\2"+
		"xy\7/\2\2yz\7G\2\2z{\7P\2\2{|\7I\2\2|}\7K\2\2}~\7P\2\2~\177\7G\2\2\177"+
		"\u0080\7<\2\2\u0080\6\3\2\2\2\u0081\u0082\7=\2\2\u0082\b\3\2\2\2\u0083"+
		"\u0084\7#\2\2\u0084\n\3\2\2\2\u0085\u0086\7K\2\2\u0086\u0087\7P\2\2\u0087"+
		"\u0088\7/\2\2\u0088\u0089\7G\2\2\u0089\u008a\7P\2\2\u008a\u008b\7I\2\2"+
		"\u008b\u008c\7K\2\2\u008c\u008d\7P\2\2\u008d\u008e\7G\2\2\u008e\u008f"+
		"\7<\2\2\u008f\f\3\2\2\2\u0090\u0091\7Q\2\2\u0091\u0092\7W\2\2\u0092\u0093"+
		"\7V\2\2\u0093\u0094\7/\2\2\u0094\u0095\7H\2\2\u0095\u0096\7K\2\2\u0096"+
		"\u0097\7N\2\2\u0097\u0098\7V\2\2\u0098\u0099\7G\2\2\u0099\u009a\7T\2\2"+
		"\u009a\16\3\2\2\2\u009b\u009c\7.\2\2\u009c\20\3\2\2\2\u009d\u009e\7p\2"+
		"\2\u009e\u009f\7c\2\2\u009f\u00a0\7o\2\2\u00a0\u00a1\7g\2\2\u00a1\u00a2"+
		"\7*\2\2\u00a2\u00a3\7+\2\2\u00a3\22\3\2\2\2\u00a4\u00a5\7k\2\2\u00a5\u00a6"+
		"\7p\2\2\u00a6\u00a7\7f\2\2\u00a7\u00a8\7g\2\2\u00a8\u00a9\7z\2\2\u00a9"+
		"\u00aa\7*\2\2\u00aa\u00ab\7+\2\2\u00ab\24\3\2\2\2\u00ac\u00ad\7u\2\2\u00ad"+
		"\u00ae\7r\2\2\u00ae\u00af\7n\2\2\u00af\u00b0\7k\2\2\u00b0\u00b1\7v\2\2"+
		"\u00b1\26\3\2\2\2\u00b2\u00b3\7a\2\2\u00b3\u00b4\7k\2\2\u00b4\u00b5\7"+
		"f\2\2\u00b5\30\3\2\2\2\u00b6\u00ba\7%\2\2\u00b7\u00b9\13\2\2\2\u00b8\u00b7"+
		"\3\2\2\2\u00b9\u00bc\3\2\2\2\u00ba\u00bb\3\2\2\2\u00ba\u00b8\3\2\2\2\u00bb"+
		"\u00bd\3\2\2\2\u00bc\u00ba\3\2\2\2\u00bd\u00be\7\f\2\2\u00be\u00bf\3\2"+
		"\2\2\u00bf\u00c0\b\r\2\2\u00c0\32\3\2\2\2\u00c1\u00c2\t\2\2\2\u00c2\u00c3"+
		"\3\2\2\2\u00c3\u00c4\b\16\2\2\u00c4\34\3\2\2\2\u00c5\u00c7\7\17\2\2\u00c6"+
		"\u00c5\3\2\2\2\u00c6\u00c7\3\2\2\2\u00c7\u00c8\3\2\2\2\u00c8\u00c9\7\f"+
		"\2\2\u00c9\u00ca\3\2\2\2\u00ca\u00cb\b\17\2\2\u00cb\36\3\2\2\2\u00cc\u00cd"+
		"\7K\2\2\u00cd\u00ce\7P\2\2\u00ce \3\2\2\2\u00cf\u00d0\7Q\2\2\u00d0\u00d1"+
		"\7W\2\2\u00d1\u00d2\7V\2\2\u00d2\"\3\2\2\2\u00d3\u00d4\7>\2\2\u00d4\u00d5"+
		"\7/\2\2\u00d5$\3\2\2\2\u00d6\u00d7\7?\2\2\u00d7&\3\2\2\2\u00d8\u00d9\7"+
		"#\2\2\u00d9\u00da\7?\2\2\u00da(\3\2\2\2\u00db\u00dc\7>\2\2\u00dc*\3\2"+
		"\2\2\u00dd\u00de\7>\2\2\u00de\u00df\7?\2\2\u00df,\3\2\2\2\u00e0\u00e1"+
		"\7@\2\2\u00e1.\3\2\2\2\u00e2\u00e3\7@\2\2\u00e3\u00e4\7?\2\2\u00e4\60"+
		"\3\2\2\2\u00e5\u00e6\7(\2\2\u00e6\u00e7\7(\2\2\u00e7\62\3\2\2\2\u00e8"+
		"\u00e9\7~\2\2\u00e9\u00ea\7~\2\2\u00ea\64\3\2\2\2\u00eb\u00ec\7-\2\2\u00ec"+
		"\66\3\2\2\2\u00ed\u00ee\7/\2\2\u00ee8\3\2\2\2\u00ef\u00f0\7\61\2\2\u00f0"+
		":\3\2\2\2\u00f1\u00f2\7v\2\2\u00f2\u00f3\7t\2\2\u00f3\u00f4\7w\2\2\u00f4"+
		"\u00f5\7g\2\2\u00f5<\3\2\2\2\u00f6\u00f7\7h\2\2\u00f7\u00f8\7c\2\2\u00f8"+
		"\u00f9\7n\2\2\u00f9\u00fa\7u\2\2\u00fa\u00fb\7g\2\2\u00fb>\3\2\2\2\u00fc"+
		"\u00fe\t\3\2\2\u00fd\u00fc\3\2\2\2\u00fe\u00ff\3\2\2\2\u00ff\u00fd\3\2"+
		"\2\2\u00ff\u0100\3\2\2\2\u0100@\3\2\2\2\u0101\u0103\t\3\2\2\u0102\u0101"+
		"\3\2\2\2\u0103\u0104\3\2\2\2\u0104\u0102\3\2\2\2\u0104\u0105\3\2\2\2\u0105"+
		"\u0106\3\2\2\2\u0106\u0108\7\60\2\2\u0107\u0109\t\3\2\2\u0108\u0107\3"+
		"\2\2\2\u0109\u010a\3\2\2\2\u010a\u0108\3\2\2\2\u010a\u010b\3\2\2\2\u010b"+
		"B\3\2\2\2\u010c\u0110\7)\2\2\u010d\u010f\n\4\2\2\u010e\u010d\3\2\2\2\u010f"+
		"\u0112\3\2\2\2\u0110\u010e\3\2\2\2\u0110\u0111\3\2\2\2\u0111\u0113\3\2"+
		"\2\2\u0112\u0110\3\2\2\2\u0113\u0114\7)\2\2\u0114D\3\2\2\2\u0115\u0116"+
		"\7C\2\2\u0116\u0117\7X\2\2\u0117\u0118\7I\2\2\u0118F\3\2\2\2\u0119\u011a"+
		"\7E\2\2\u011a\u011b\7Q\2\2\u011b\u011c\7W\2\2\u011c\u011d\7P\2\2\u011d"+
		"\u011e\7V\2\2\u011eH\3\2\2\2\u011f\u0120\7O\2\2\u0120\u0121\7C\2\2\u0121"+
		"\u0122\7Z\2\2\u0122J\3\2\2\2\u0123\u0124\7O\2\2\u0124\u0125\7K\2\2\u0125"+
		"\u0126\7P\2\2\u0126L\3\2\2\2\u0127\u0128\7U\2\2\u0128\u0129\7W\2\2\u0129"+
		"\u012a\7O\2\2\u012aN\3\2\2\2\u012b\u012c\7K\2\2\u012c\u012d\7O\2\2\u012d"+
		"\u012e\7R\2\2\u012e\u012f\7N\2\2\u012f\u0130\7Q\2\2\u0130\u0131\7F\2\2"+
		"\u0131\u0132\7G\2\2\u0132P\3\2\2\2\u0133\u0134\7N\2\2\u0134\u0135\7K\2"+
		"\2\u0135\u0136\7U\2\2\u0136\u0137\7V\2\2\u0137R\3\2\2\2\u0138\u0139\7"+
		"Q\2\2\u0139\u013a\7D\2\2\u013a\u013b\7L\2\2\u013b\u013c\7G\2\2\u013c\u013d"+
		"\7E\2\2\u013d\u013e\7V\2\2\u013eT\3\2\2\2\u013f\u0141\t\5\2\2\u0140\u013f"+
		"\3\2\2\2\u0141\u0142\3\2\2\2\u0142\u0140\3\2\2\2\u0142\u0143\3\2\2\2\u0143"+
		"V\3\2\2\2\u0144\u0145\7*\2\2\u0145X\3\2\2\2\u0146\u0147\7+\2\2\u0147Z"+
		"\3\2\2\2\u0148\u0149\7]\2\2\u0149\\\3\2\2\2\u014a\u014b\7_\2\2\u014b^"+
		"\3\2\2\2\u014c\u014d\7&\2\2\u014d`\3\2\2\2\u014e\u014f\7A\2\2\u014fb\3"+
		"\2\2\2\u0150\u0151\7,\2\2\u0151d\3\2\2\2\u0152\u0153\7B\2\2\u0153f\3\2"+
		"\2\2\u0154\u0155\7\60\2\2\u0155h\3\2\2\2\u0156\u0157\7<\2\2\u0157j\3\2"+
		"\2\2\n\2\u00ba\u00c6\u00ff\u0104\u010a\u0110\u0142\3\b\2\2";
	public static final ATN _ATN =
		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
	static {
		_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];
		for (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {
			_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);
		}
	}
}